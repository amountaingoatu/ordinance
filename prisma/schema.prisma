//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

enum ActivityStatus {
  begin
  end
  late_end

  @@map("activity_status")
}

model User {
  id                   String         @id() @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  name                 String
  email                String         @unique()
  password             String
  posts                Activity[]
  sessions             Session[]
  ActivityTypesCreated ActivityType[]

  @@map("users")
}

model Session {
  id        String   @id()
  expiresAt DateTime @map("expires_at")
  userId    String   @map("user_id") @db.Uuid()
  user      User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model Activity {
  id          String                   @id() @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  createdAt   DateTime                 @default(now()) @map("created_at")
  updatedAt   DateTime?                @updatedAt() @map("updated_at")
  description String?
  status      ActivityStatus?
  endedAt     DateTime?                @map("ended_at")
  lng         Decimal?                 @db.Decimal(11, 8)
  lat         Decimal?                 @db.Decimal(10, 8)
  coordinates Unsupported("geometry")?
  typeId      String                   @db.Uuid()
  type        ActivityType             @relation(fields: [typeId], references: [id])
  createdById String                   @map("created_by_id") @db.Uuid()
  createdBy   User                     @relation(fields: [createdById], references: [id])

  @@map("activities")
}

model ActivityType {
  id          String     @id() @unique() @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  name        String
  Activities  Activity[]
  createdById String     @map("created_by_id") @db.Uuid()
  createdBy   User       @relation(fields: [createdById], references: [id])
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime?  @updatedAt() @map("updated_at")

  @@map("activity_types")
}

model Location {
  id               Int           @id() @default(autoincrement())
  latitude         Float
  longitude        Float
  accuracy         Float
  altitude         Float?
  altitudeAccuracy Float?
  heading          Float?
  speed            Float?
  timestamp        DateTime      @default(now())
  created_at       DateTime      @default(now())
  updated_at       DateTime      @default(now())
  osm_locations    OsmLocation[]

  @@map("locations")
}

model OsmLocation {
  id           Int      @id() @default(autoincrement())
  place_id     Int
  licence      String?
  osm_type     String?
  osm_id       Int
  lat          String
  lon          String
  display_name String?
  class        String?
  type         String?
  importance   Float?
  icon         String?
  timestamp    DateTime @default(now())
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  location_id  Int
  boundingbox  String[]
  locations    Location @relation(fields: [location_id], references: [id])

  @@map("osm_locations")
}

model Reminder {
  id           Int       @id() @default(autoincrement())
  content      String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  complete     Boolean   @default(false)
  completed_at DateTime?

  @@map("reminders")
}
